

********** testmatc.sml *************

> datatype t
    con A : t
    con B : t
    con C : int list -> t
  exception A
  exception A71
  exception A72 of int
  exception B
  exception C
  exception D
  exception I of int
  exception R of string
  exception Z of int
  val berry : bool * bool * bool -> int
  val check : bool -> string
  val check' : (unit -> bool) -> string
  val checkres1 : ('a -> ''b) -> ('a * ''b) list -> string
  val checkres2 : ('a -> 'b -> ''c) -> ('a * 'b * ''c) list -> string
  val dynExcon : exn
  val enclose42 : unit -> string list
  val enclose43 : unit -> string
  val esc : string -> int
  val f1 : 'a list * 'b list -> int
  val f1c : 'a list -> 'b list -> int
  val f2 : 'a list * 'b list -> int
  val f2c : 'a list -> 'b list -> int
  val fbind : 'a list -> 'a
  val fc : char -> int
  val fc1 : string t -> string
  val fcon : t * t * t -> int
  val fexc1 : exn -> int
  val fexc2 : exn -> int
  val fi : int -> int
  val fr : string -> int
  val fref1 : unit ref -> int
  val fref2 : int list ref -> int
  val fs : string -> int
  val funit1 : unit -> int
  val funit2 : unit -> int
  val fw : word -> int
  val irr1 : unit * int -> int
  val irr2 : int * int -> int
  val irr3 : 'a * int -> int
  val prln : string -> string -> unit
  val test10a : string
  val test10b : string
  val test10c : string
  val test10d : string
  val test11a : string
  val test11b : string
  val test11c : string
  val test12a : string
  val test12b : string
  val test12c : string
  val test12d : string
  val test12e : string
  val test13a : string
  val test13b : string
  val test13c : string
  val test13d : string
  val test14a : string
  val test14b : string
  val test14c : string
  val test14d : string
  val test1a : string
  val test1b : string
  val test1c : string
  val test20 : string
  val test21 : string
  val test2a : string
  val test2b : string
  val test2c : string
  val test30 : string
  val test31 : string
  val test3a : string
  val test3b : string
  val test3c : string
  val test40a : string
  val test40b : string
  val test40c : string
  val test40d : string
  val test40e : string
  val test41a : string
  val test42 : string list
  val test43 : string
  val test4a : string
  val test4b : string
  val test4c : string
  val test5 : string
  val test50a : string
  val test50b : string
  val test50c : string
  val test60a : string
  val test6a : string
  val test6b : string
  val test6c : string
  val test6d : string
  val test70 : string
  val test71 : string
  val test72 : string
  val testberry : string
 *** Warnings ***
testmatc.sml, line 22, column 7:
  fun f1 ([], [])       = 111 
         ^^^^^^^^^^^^^^^^^^^^^
    | f1 (x::xr, y::yr) = 222;        
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 25, column 8:
  fun f1c []      []      = 111 
          ^^^^^^^^^^^^^^^^^^^^^^
    | f1c (x::xr) (y::yr) = 222;        
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 44, column 7:
  fun f2 ([], [])       = 111 
         ^^^^^^^^^^^^^^^^^^^^^
    | f2 (x::xr, y::yr) = 222
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | f2 ([], [])       = 333;
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 46, column 7:
    | f2 ([], [])       = 333;
         ^^^^^^^^^^^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 48, column 8:
  fun f2c []      []      = 111 
          ^^^^^^^^^^^^^^^^^^^^^^
    | f2c (x::xr) (y::yr) = 222
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | f2c []      []      = 333;
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 50, column 8:
    | f2c []      []      = 333;
          ^^^^^^^^^^^^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 102, column 9:
  fun fcon (A,   B, C [] ) = 111
           ^^^^^^^^^^^^^^^^^^^^^
    | fcon (A,   B, C [1]) = 222
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | fcon (B,   B, _    ) = 333
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | fcon (A,   A, A    ) = 444
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | fcon (C[], A, A    ) = 555;
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 132, column 7:
  fun fi 101  = 111
         ^^^^^^^^^^
    | fi 102  = 222
  ^^^^^^^^^^^^^^^^^
    | fi 101  = 333
  ^^^^^^^^^^^^^^^^^
    | fi 104  = 444
  ^^^^^^^^^^^^^^^^^
    | fi ~101 = 555;
  ^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 134, column 7:
    | fi 101  = 333
         ^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 147, column 13:
  fun fs "first"  = 111
               ^^^^^^^^
    | fs "second" = 222
  ^^^^^^^^^^^^^^^^^^^^^
    | fs "first"  = 333
  ^^^^^^^^^^^^^^^^^^^^^
    | fs "fourth" = 444;
  ^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 149, column 13:
    | fs "first"  = 333
               ^^^^^^^^
That rule is redundant.
testmatc.sml, line 159, column 7:
  fun fc #"A" = 111
         ^^^^^^^^^^
    | fc #"B" = 222
  ^^^^^^^^^^^^^^^^^
    | fc #"A" = 333
  ^^^^^^^^^^^^^^^^^
    | fc #"D" = 444;
  ^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 161, column 7:
    | fc #"A" = 333
         ^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 175, column 7:
  fun fw 0wx101 = 111
         ^^^^^^^^^^^^
    | fw 0wx102 = 222
  ^^^^^^^^^^^^^^^^^^^
    | fw 0wx101 = 333
  ^^^^^^^^^^^^^^^^^^^
    | fw 0wx104 = 444;
  ^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 177, column 7:
    | fw 0wx101 = 333
         ^^^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 189, column 13:
  fun fr "101.0"  = 111
               ^^^^^^^^
    | fr "102.5"  = 222
  ^^^^^^^^^^^^^^^^^^^^^
    | fr "101.0"  = 333
  ^^^^^^^^^^^^^^^^^^^^^
    | fr "104.8"  = 444
  ^^^^^^^^^^^^^^^^^^^^^
    | fr "~101.0" = 555;
  ^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 191, column 13:
    | fr "101.0"  = 333
               ^^^^^^^^
That rule is redundant.
testmatc.sml, line 209, column 11:
    | funit1 x  = 222;
             ^^^^^^^^
That rule is redundant.
testmatc.sml, line 212, column 11:
    | funit2 x  = 222;
             ^^^^^^^^
That rule is redundant.
testmatc.sml, line 247, column 10:
    | fref1 (ref x)  = 222;
            ^^^^^^^^^^^^^^
That rule is redundant.
testmatc.sml, line 275, column 10:
  fun fexc1 A = 1
            ^^^^^
    | fexc1 B = 2
  ^^^^^^^^^^^^^^^
    | fexc1 A = 3
  ^^^^^^^^^^^^^^^
    | fexc1 C = 4;
  ^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 277, column 10:
    | fexc1 A = 3
            ^^^^^
That rule is redundant.
testmatc.sml, line 321, column 19:
          fun fexc11 A = 1
                     ^^^^^
            | fexc11 B = 2
  ^^^^^^^^^^^^^^^^^^^^^^^^
            | fexc11 A = 3
  ^^^^^^^^^^^^^^^^^^^^^^^^
            | fexc11 C = 4;
  ^^^^^^^^^^^^^^^^^^^^^^^^
Match not exhaustive.
testmatc.sml, line 323, column 19:
            | fexc11 A = 3
                     ^^^^^
That rule is redundant.
testmatc.sml, line 373, column 12:
      let val [x] = xs in x end
              ^^^
Pattern not exhaustive.
